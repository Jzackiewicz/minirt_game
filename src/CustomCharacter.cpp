#include "CustomCharacter.hpp"

namespace {
static const uint8_t ASCII_FONT[128][7] = {
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, // 000
    {0x0E, 0x1F, 0x15, 0x1F, 0x1B, 0x11, 0x0E}, // 001
    {0x0E, 0x1F, 0x15, 0x1F, 0x11, 0x1B, 0x0E}, // 002
    {0x00, 0x0A, 0x1F, 0x1F, 0x1F, 0x0E, 0x04}, // 003
    {0x00, 0x04, 0x0E, 0x1F, 0x1F, 0x0E, 0x04}, // 004
    {0x0E, 0x0A, 0x1F, 0x15, 0x1F, 0x04, 0x0E}, // 005
    {0x04, 0x0E, 0x1F, 0x1F, 0x1F, 0x04, 0x0E}, // 006
    {0x00, 0x00, 0x04, 0x0E, 0x0E, 0x04, 0x00}, // 007
    {0x1F, 0x1F, 0x1B, 0x11, 0x11, 0x1B, 0x1F}, // 008
    {0x00, 0x00, 0x04, 0x0A, 0x0A, 0x04, 0x00}, // 009
    {0x1F, 0x1F, 0x1B, 0x15, 0x15, 0x1B, 0x1F}, // 010
    {0x00, 0x07, 0x03, 0x0D, 0x14, 0x14, 0x08}, // 011
    {0x0E, 0x11, 0x11, 0x0E, 0x04, 0x1F, 0x04}, // 012
    {0x0F, 0x09, 0x0F, 0x08, 0x08, 0x08, 0x18}, // 013
    {0x0F, 0x09, 0x0F, 0x09, 0x09, 0x0B, 0x18}, // 014
    {0x04, 0x15, 0x0E, 0x1B, 0x1B, 0x0E, 0x15}, // 015
    {0x10, 0x18, 0x1E, 0x1F, 0x1E, 0x18, 0x10}, // 016
    {0x01, 0x03, 0x0F, 0x1F, 0x0F, 0x03, 0x01}, // 017
    {0x04, 0x0E, 0x15, 0x04, 0x15, 0x0E, 0x04}, // 018
    {0x1B, 0x1B, 0x1B, 0x1B, 0x1B, 0x00, 0x1B}, // 019
    {0x0F, 0x15, 0x15, 0x0D, 0x05, 0x05, 0x05}, // 020
    {0x06, 0x09, 0x0A, 0x05, 0x02, 0x09, 0x09}, // 021
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x1F, 0x1F}, // 022
    {0x04, 0x0E, 0x15, 0x04, 0x15, 0x0E, 0x04}, // 023
    {0x00, 0x04, 0x0E, 0x15, 0x04, 0x04, 0x04}, // 024
    {0x00, 0x04, 0x04, 0x04, 0x15, 0x0E, 0x04}, // 025
    {0x00, 0x04, 0x02, 0x1F, 0x02, 0x04, 0x00}, // 026
    {0x00, 0x04, 0x08, 0x1F, 0x08, 0x04, 0x00}, // 027
    {0x00, 0x10, 0x10, 0x10, 0x1F, 0x00, 0x00}, // 028
    {0x00, 0x0A, 0x1F, 0x1F, 0x0A, 0x00, 0x00}, // 029
    {0x00, 0x04, 0x04, 0x0E, 0x1F, 0x1F, 0x00}, // 030
    {0x00, 0x1F, 0x1F, 0x0E, 0x04, 0x04, 0x00}, // 031
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, // 032 ' '
    {0x04, 0x04, 0x04, 0x04, 0x04, 0x00, 0x04}, // 033 '!'
    {0x0A, 0x0A, 0x0A, 0x00, 0x00, 0x00, 0x00}, // 034 '"'
    {0x0A, 0x0A, 0x1F, 0x0A, 0x1F, 0x0A, 0x0A}, // 035 '#'
    {0x04, 0x0F, 0x14, 0x0E, 0x05, 0x1E, 0x04}, // 036 '$'
    {0x18, 0x19, 0x02, 0x04, 0x08, 0x13, 0x03}, // 037 '%'
    {0x08, 0x14, 0x14, 0x08, 0x15, 0x12, 0x0D}, // 038 '&'
    {0x06, 0x06, 0x04, 0x08, 0x00, 0x00, 0x00}, // 039 '''
    {0x02, 0x04, 0x08, 0x08, 0x08, 0x04, 0x02}, // 040 '('
    {0x08, 0x04, 0x02, 0x02, 0x02, 0x04, 0x08}, // 041 ')'
    {0x04, 0x15, 0x0E, 0x1F, 0x0E, 0x15, 0x04}, // 042 '*'
    {0x00, 0x04, 0x04, 0x1F, 0x04, 0x04, 0x00}, // 043 '+'
    {0x00, 0x00, 0x00, 0x00, 0x06, 0x06, 0x04}, // 044 ','
    {0x00, 0x00, 0x00, 0x1F, 0x00, 0x00, 0x00}, // 045 '-'
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x06}, // 046 '.'
    {0x00, 0x01, 0x02, 0x04, 0x08, 0x10, 0x00}, // 047 '/'
    {0x0E, 0x11, 0x13, 0x15, 0x19, 0x11, 0x0E}, // 048 '0'
    {0x04, 0x0C, 0x04, 0x04, 0x04, 0x04, 0x0E}, // 049 '1'
    {0x0E, 0x11, 0x01, 0x0E, 0x10, 0x10, 0x1F}, // 050 '2'
    {0x1F, 0x01, 0x02, 0x06, 0x01, 0x11, 0x0E}, // 051 '3'
    {0x02, 0x06, 0x0A, 0x12, 0x1F, 0x02, 0x02}, // 052 '4'
    {0x1F, 0x10, 0x1E, 0x01, 0x01, 0x11, 0x0E}, // 053 '5'
    {0x07, 0x08, 0x10, 0x1E, 0x11, 0x11, 0x0E}, // 054 '6'
    {0x1F, 0x01, 0x01, 0x02, 0x04, 0x08, 0x10}, // 055 '7'
    {0x0E, 0x11, 0x11, 0x0E, 0x11, 0x11, 0x0E}, // 056 '8'
    {0x0E, 0x11, 0x11, 0x0F, 0x01, 0x02, 0x1C}, // 057 '9'
    {0x00, 0x00, 0x04, 0x00, 0x04, 0x00, 0x00}, // 058 ':'
    {0x00, 0x00, 0x04, 0x00, 0x04, 0x04, 0x08}, // 059 ';'
    {0x01, 0x02, 0x04, 0x08, 0x04, 0x02, 0x01}, // 060 '<'
    {0x00, 0x00, 0x1F, 0x00, 0x1F, 0x00, 0x00}, // 061 '='
    {0x08, 0x04, 0x02, 0x01, 0x02, 0x04, 0x08}, // 062 '>'
    {0x0E, 0x11, 0x01, 0x06, 0x04, 0x00, 0x04}, // 063 '?'
    {0x0E, 0x11, 0x15, 0x17, 0x16, 0x10, 0x0F}, // 064 '@'
    {0x04, 0x0A, 0x11, 0x11, 0x1F, 0x11, 0x11}, // 065 'A'
    {0x1E, 0x11, 0x11, 0x1E, 0x11, 0x11, 0x1E}, // 066 'B'
    {0x0E, 0x11, 0x10, 0x10, 0x10, 0x11, 0x0E}, // 067 'C'
    {0x1E, 0x11, 0x11, 0x11, 0x11, 0x11, 0x1E}, // 068 'D'
    {0x1F, 0x10, 0x10, 0x1E, 0x10, 0x10, 0x1F}, // 069 'E'
    {0x1F, 0x10, 0x10, 0x1E, 0x10, 0x10, 0x10}, // 070 'F'
    {0x0F, 0x11, 0x10, 0x10, 0x13, 0x11, 0x0F}, // 071 'G'
    {0x11, 0x11, 0x11, 0x1F, 0x11, 0x11, 0x11}, // 072 'H'
    {0x0E, 0x04, 0x04, 0x04, 0x04, 0x04, 0x0E}, // 073 'I'
    {0x07, 0x02, 0x02, 0x02, 0x02, 0x12, 0x0C}, // 074 'J'
    {0x11, 0x12, 0x14, 0x18, 0x14, 0x12, 0x11}, // 075 'K'
    {0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x1F}, // 076 'L'
    {0x11, 0x1B, 0x15, 0x15, 0x15, 0x11, 0x11}, // 077 'M'
    {0x11, 0x11, 0x19, 0x15, 0x13, 0x11, 0x11}, // 078 'N'
    {0x0E, 0x11, 0x11, 0x11, 0x11, 0x11, 0x0E}, // 079 'O'
    {0x1E, 0x11, 0x11, 0x1E, 0x10, 0x10, 0x10}, // 080 'P'
    {0x0E, 0x11, 0x11, 0x11, 0x15, 0x12, 0x0D}, // 081 'Q'
    {0x1E, 0x11, 0x11, 0x1E, 0x14, 0x12, 0x11}, // 082 'R'
    {0x0E, 0x11, 0x10, 0x0E, 0x01, 0x11, 0x0E}, // 083 'S'
    {0x1F, 0x15, 0x04, 0x04, 0x04, 0x04, 0x04}, // 084 'T'
    {0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x0E}, // 085 'U'
    {0x11, 0x11, 0x11, 0x11, 0x11, 0x0A, 0x04}, // 086 'V'
    {0x11, 0x11, 0x11, 0x15, 0x15, 0x15, 0x0A}, // 087 'W'
    {0x11, 0x11, 0x0A, 0x04, 0x0A, 0x11, 0x11}, // 088 'X'
    {0x11, 0x11, 0x0A, 0x04, 0x04, 0x04, 0x04}, // 089 'Y'
    {0x1F, 0x01, 0x02, 0x0E, 0x08, 0x10, 0x1F}, // 090 'Z'
    {0x0F, 0x08, 0x08, 0x08, 0x08, 0x08, 0x0F}, // 091 '['
    {0x00, 0x10, 0x08, 0x04, 0x02, 0x01, 0x00}, // 092 '\\'
    {0x0F, 0x01, 0x01, 0x01, 0x01, 0x01, 0x0F}, // 093 ']'
    {0x04, 0x0A, 0x11, 0x00, 0x00, 0x00, 0x00}, // 094 '^'
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1F}, // 095 '_'
    {0x0C, 0x0C, 0x04, 0x02, 0x00, 0x00, 0x00}, // 096 '`'
    {0x00, 0x00, 0x0C, 0x02, 0x0E, 0x12, 0x0F}, // 097 'a'
    {0x10, 0x10, 0x16, 0x19, 0x11, 0x19, 0x16}, // 098 'b'
    {0x00, 0x00, 0x0E, 0x11, 0x10, 0x11, 0x0E}, // 099 'c'
    {0x01, 0x01, 0x0D, 0x13, 0x11, 0x13, 0x0D}, // 100 'd'
    {0x00, 0x00, 0x0E, 0x11, 0x1F, 0x10, 0x0E}, // 101 'e'
    {0x02, 0x05, 0x04, 0x0E, 0x04, 0x04, 0x04}, // 102 'f'
    {0x00, 0x00, 0x0E, 0x13, 0x13, 0x0D, 0x01}, // 103 'g'
    {0x10, 0x10, 0x16, 0x19, 0x11, 0x11, 0x11}, // 104 'h'
    {0x04, 0x00, 0x0C, 0x04, 0x04, 0x04, 0x0E}, // 105 'i'
    {0x02, 0x00, 0x02, 0x02, 0x02, 0x12, 0x0C}, // 106 'j'
    {0x10, 0x10, 0x12, 0x14, 0x18, 0x14, 0x12}, // 107 'k'
    {0x0C, 0x04, 0x04, 0x04, 0x04, 0x04, 0x0E}, // 108 'l'
    {0x00, 0x00, 0x1A, 0x15, 0x15, 0x15, 0x15}, // 109 'm'
    {0x00, 0x00, 0x16, 0x19, 0x11, 0x11, 0x11}, // 110 'n'
    {0x00, 0x00, 0x0E, 0x11, 0x11, 0x11, 0x0E}, // 111 'o'
    {0x00, 0x00, 0x16, 0x19, 0x19, 0x16, 0x10}, // 112 'p'
    {0x00, 0x00, 0x0D, 0x13, 0x13, 0x0D, 0x01}, // 113 'q'
    {0x00, 0x00, 0x16, 0x19, 0x10, 0x10, 0x10}, // 114 'r'
    {0x00, 0x00, 0x0F, 0x10, 0x0E, 0x01, 0x1E}, // 115 's'
    {0x04, 0x04, 0x1F, 0x04, 0x04, 0x05, 0x02}, // 116 't'
    {0x00, 0x00, 0x11, 0x11, 0x11, 0x13, 0x0D}, // 117 'u'
    {0x00, 0x00, 0x11, 0x11, 0x11, 0x0A, 0x04}, // 118 'v'
    {0x00, 0x00, 0x11, 0x11, 0x15, 0x15, 0x0A}, // 119 'w'
    {0x00, 0x00, 0x11, 0x0A, 0x04, 0x0A, 0x11}, // 120 'x'
    {0x00, 0x00, 0x11, 0x11, 0x0F, 0x01, 0x11}, // 121 'y'
    {0x00, 0x00, 0x1F, 0x02, 0x04, 0x08, 0x1F}, // 122 'z'
    {0x02, 0x04, 0x04, 0x08, 0x04, 0x04, 0x02}, // 123 '{'
    {0x04, 0x04, 0x04, 0x00, 0x04, 0x04, 0x04}, // 124 '|'
    {0x08, 0x04, 0x04, 0x02, 0x04, 0x04, 0x08}, // 125 '}'
    {0x08, 0x15, 0x02, 0x00, 0x00, 0x00, 0x00}, // 126 '~'
    {0x04, 0x0E, 0x1B, 0x11, 0x11, 0x1F, 0x00}, // 127
};
}

const uint8_t *CustomCharacter::get_glyph(char character) {
    unsigned char c = static_cast<unsigned char>(character);
    if (c >= 128)
        c = '?';
    return ASCII_FONT[c];
}

void CustomCharacter::draw_character(SDL_Renderer *renderer, char character, int x, int y,
                                     SDL_Color color, int scale) {
    const uint8_t *glyph = get_glyph(character);
    if (!glyph)
        return;
    SDL_SetRenderDrawColor(renderer, color.r, color.g, color.b, color.a);
    for (int row = 0; row < 7; ++row) {
        for (int column = 0; column < 5; ++column) {
            if (glyph[row] & (1 << (4 - column))) {
                SDL_Rect rect{x + column * scale, y + row * scale, scale, scale};
                SDL_RenderFillRect(renderer, &rect);
            }
        }
    }
}

void CustomCharacter::draw_text(SDL_Renderer *renderer, const std::string &text, int x, int y,
                                SDL_Color color, int scale) {
    for (char c : text) {
        draw_character(renderer, c, x, y, color, scale);
        x += (5 + 1) * scale;
    }
}

int CustomCharacter::text_width(const std::string &text, int scale) {
    return (static_cast<int>(text.size()) * (5 + 1) - 1) * scale;
}

